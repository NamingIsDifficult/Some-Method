概要：
	这是一种管理缓存集群的负载均衡、成员拉入拉出、缓存项的持久化及找回管理的方法，主要用于提升服务器响应速度，降低数据服务器负载，
Session服务器功能，有优秀的横向扩展能力，错误恢复能力。

	1.负载均衡：
	负载均衡需要达到以下指标：
		1.默认情况下缓存键值可以均匀分布在集群成员中
		2.指定集群成员负载繁重程度可调，且调整过程中不丢失已有的缓存项
	本方法中负载均衡采用改进型的一致性哈希来达成以上技术指标。哈希函数选择MD5，采用虚拟节点技术来调整集群成员的负载状况。假设企业计划使用
10台机器组成缓存集群，以默认负载均衡方式，按照经验，应该为每个成员设置150个虚拟节点，比如server01~server150对应1号机器，以此类推，最终按
照对虚拟节点的MD5值进行排序并组成哈希环供后续负载均衡分配使用。由哈希的随机性和独立重复事件的特性可以推论，集群中的成员的负载与成员相应
的虚拟节点的个数在总虚拟节点个数的比例成正相关。由此可以通过调整不同成员的虚拟节点数量来相应调整该成员的负载情况。
	由上可知，如果集群中的成员配置相近，则应该为所有成员配置相同的虚拟节点数，这样可以使得各个成员的负载状况相近。
	如果集群中成员配置不同，则应该为配置较差的成员配置相对少的虚拟节点，在实际操作中，应该按照机器的运行状况做微调，为了使得负载动态可调
，需借助后续的缓存项管理技术。
	2.成员拉入拉出
		在传统的使用一致性哈希方法进行负载均衡的系统中都存在这样的问题，如果要在运行中加入或者减少成员，则其余每个成员均会有部分缓存项
	因为被路由到新成员而丢失，对于此问题，本方法将使用改进的一致性哈希算法来尽量减少缓存项的丢失：
		2.1：此方法需要维护一张路由表，其格式如下
		virtual node		type			cluster member
		server1				old				member1
		...					old				...
		server1000			old				member7
		当加入新成员时:
		virtual node		type			cluster member
		server1				old				member1
		...					old				...
		server1000			old				member7
		server1100			new				member8
		当客户端向服务器查询缓存项时，如果该缓存项命中的是type为new的服务器，如果查询未成功，则并不马上返回，而是从哈希环中找到当前
	命中的虚拟节点的下一个节点对应的服务器，如果该服务器的type为old，则尝试对此服务器做相同的查询，如果查询不成功，则返回，如果查询
	成功，则将此缓存项存入客户端首次请求的服务器中，然后返回；如果该服务器的type仍然为new，则再次从哈希环中选取下一个节点，以此规则
	迭代。新加入的机器应该在加入后至多1个小时即被修改为type=old，在此过程中，集群的其它成员的负载将会逐渐降低直至接近运维调配的负载
	比例。
		当从集群中拉出部分成员时，并不马上从集群中拉出，而是现将路由表中将要拉出的服务器type改为remove:
		virtual node		type			cluster member
		server1				old				member1
		...					old				...
		server1000			old				member7
		server1100			remove			member8
		当客户端向服务器查询时如果命中到type为remove的服务器，如果查询成功，并不马上返回，而是从哈希环中找到当前命中的虚拟节点的下一个
	节点对应的服务器，如果该服务器的type不为remove，则对此服务器写入该缓存项，否则迭代查找至下一个type不为remove的节点，重复此过程，
	然后返回；如查询不成功，则应该按照正常流程处理，并且将更新后的缓存项写入下一个type不为remove的虚拟节点对应的服务器中。type为remove
	的成员至多应该在提交remove请求后至多1个小时即从集群中完全拉出，在此过程中，集群中的其它成员负载将会逐渐上升至运维调配的负载比例。
		3.缓存项的持久化和错误回复
		目前针对服务器的fail over主流的做法是使用主从服务器，slave在master健康存活的时候以分摊查询负载的角色存在，这个策略的优点是：
		1.查询性能随着slave的数量增加而提升，不过在负载不高的系统中，该性能提升不显著。
		2.master宕机时，几乎不会对系统造成影响，更不会为部分机器宕机而导致请求击穿缓存导致后台系统雪崩式崩溃。
		该策略的缺点是：
		1.由于每台机器都需要配备slave，成本上对中小型企业和团队有较大压力。
		2.对于请求频率一般，但是缓存键值数量较大的系统而言，会产生较大的硬件资源浪费。
		针对以上确定，我思考出一种环式的成员间互相备份的错误恢复策略：
		每当写入缓存时，对命中的虚拟节点及其下一个虚拟节点均做写入操作，由于一致性哈希的特性，每个成员的缓存项除了本身具有之外，其余所
	有成员将会按照负载比例分摊该成员的缓存项，假使该成员宕机，则由于写入时已经将相应的缓存项写入到下一个虚拟节点，所以查询时必然可以获
	取到相同的缓存项，宕机将不会造成缓存项的丢失。
		该策略的优点：
		1.成员将相互备份，极大的减轻了运维的成本，同时降低了系统的复杂度
		该策略的缺点:
		1.集群中的成员不得不存储绝大多数时候都无用的数据，占据了本身的内存空间（仅利用了1/2），同时还会降低本身的性能。
		2.高负载时，一个成员宕机可能导致集群雪崩
		针对该策略的缺点1，可做以下改进：
		对于非本节点的数据，不存入内存，而是存入到硬盘中，并且对于不同的成员的缓存项进行标识和区分，在集群中设置哨兵，当有成员宕机时，
	由哨兵唤醒其它成员硬盘中的数据。该方法可以解决系统资源利用率的问题，但是会加剧雪崩的风险。
		以上。2016-8-8
		
